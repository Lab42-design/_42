class FetchPartial{constructor(){console.log("_42 / FetchPartial")}async fetchAll(_selector){void 0===_selector&&(_selector='link[rel="html"]');const partials=document.querySelectorAll(_selector);for(let i=0;i<partials.length;i++){var url=partials[i].getAttribute("href");this.fetch(url,partials[i])}}makeRequest(url){return new Promise((resolve,reject)=>{fetch(url).then(function(partial){return 200==partial.status?partial.text():void reject("Partial "+url+" not found")}).then(html=>{resolve(html)})})}processRequest(response,_el){return new Promise((resolve,reject)=>{_el.parentNode&&_el.parentNode.classList.contains("partial")?resolve(_el.parentNode.innerHTML=response):resolve(_el.outerHTML=response)})}async fetch(url,_el){try{var response=await this.makeRequest(url);return await this.processRequest(response,_el)}catch(error){console.error(error)}}}class PromiseDom{constructor(){this.deferred=new Promise(function(resolve,reject){try{if("interactive"===document.readyState||"complete"===document.readyState)return Promise.resolve();document.addEventListener("DOMContentLoaded",()=>resolve(),!1)}catch(error){console.error(error)}}),console.log("_42 / PromiseDom")}}
